package assetbindata

import (
	"bytes"
	"compress/gzip"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"

	"github.com/s4l1h/assetmanager"
)

// GUnzipData file
func GUnzipData(data []byte) (resData []byte, err error) {
	b := bytes.NewBuffer(data)

	var r io.Reader
	r, err = gzip.NewReader(b)
	if err != nil {
		return
	}

	var resB bytes.Buffer
	_, err = resB.ReadFrom(r)
	if err != nil {
		return
	}

	resData = resB.Bytes()

	return
}

// GZipData file
func GZipData(data []byte) (compressedData []byte, err error) {
	var b bytes.Buffer
	gz := gzip.NewWriter(&b)

	_, err = gz.Write(data)
	if err != nil {
		return
	}

	if err = gz.Flush(); err != nil {
		return
	}

	if err = gz.Close(); err != nil {
		return
	}

	compressedData = b.Bytes()

	return
}

// Compress assetmanager
func Compress(asset *assetmanager.AssetManager) []byte {
	jsonData := EncodeJSON(asset)
	res, err := GZipData(jsonData)
	if err != nil {
		panic(err)
	}
	return res
}

// MakeWritable data
func MakeWritable(data []byte) *bytes.Buffer {
	dest := new(bytes.Buffer)

	for _, b := range data {
		if b == '\n' {
			dest.WriteString(`\n`)
			continue
		}
		if b == '\\' {
			dest.WriteString(`\\`)
			continue
		}
		if b == '"' {
			dest.WriteString(`\"`)
			continue
		}
		if (b >= 32 && b <= 126) || b == '\t' {
			dest.WriteByte(b)
			continue
		}
		fmt.Fprintf(dest, "\\x%02x", b)
	}
	return dest

}

// EncodeJSON to assetmanager
func EncodeJSON(asset *assetmanager.AssetManager) []byte {
	jsonData, _ := json.Marshal(asset.GetAll())
	return jsonData

}

// DecodeJSON to assetmanager
func DecodeJSON(d []byte, asset *assetmanager.AssetManager) {
	json.Unmarshal(d, &asset.Files)
}

// GenerateOPT options
type GenerateOPT struct {
	File      string
	Namespace string
	Asset     *assetmanager.AssetManager
	CacheKey  string
}

// GeneratedCache assetmanager
var GeneratedCache = make(map[string]*assetmanager.AssetManager)

// Generate file
func Generate(opt GenerateOPT) {
	data := Compress(opt.Asset)
	// fmt.Println(data)
	//panic(opt)

	var qb bytes.Buffer
	fmt.Fprintf(&qb, `
		// Code generated by assetmanager. DO NOT EDIT.
		package %s
		
		import (
			"fmt"
		
			"github.com/s4l1h/assetmanager"
			"github.com/s4l1h/assetmanager/assetbindata"
		)
		
		// AssetManagerGenerated
		//var AssetManagerGenerated *assetmanager.AssetManager
		
		func init(){
			
			fmt.Println("assetgenerated")
			AssetManagerGenerated := assetmanager.New()
			data := "%s"
		
		`, opt.Namespace, MakeWritable(data).String())
	fmt.Fprintf(&qb, `
			d, err := assetbindata.GUnzipData([]byte(data))
			if err != nil {
				panic(err)
			}
			//fmt.Println(d)
		
			assetbindata.DecodeJSON(d, AssetManagerGenerated)
			//json.Unmarshal(d, &AssetManagerGenerated.Files)
			//fmt.Println(AssetManagerGenerated.Files)
			`)
	fmt.Fprintf(&qb, `
		assetbindata.GeneratedCache["%s"]=AssetManagerGenerated
		
		}		`, opt.CacheKey)

	if err := ioutil.WriteFile(opt.File, qb.Bytes(), 0644); err != nil {
		return
	}
	return
}
